generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model estudiante {
  id_estudiante           Int                       @id @default(autoincrement())
  nombre                  String                    @db.VarChar(100)
  email                   String                    @unique @db.VarChar(100)
  telefono                String?                   @db.VarChar(20)
  edad                    Int
  id_categoria_edad       Int?
  b_activo                Boolean?                  @default(true)
  id_usuario              Int                       @unique
  materno                 String?                   @db.VarChar(30)
  paterno                 String?                   @db.VarChar(30)
  descripcion             String?                   @db.VarChar(255)
  Inscripcion             Inscripcion[]
  reviews                 Review[]
  categoria_edad          categoria_edad?           @relation(fields: [id_categoria_edad], references: [id_categoria_edad])
  usuario                 usuario                   @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
  historial_academico     historial_academico[]
  horario                 horario[]
  imparte_registro_remota imparte_registro_remota[]
  pago                    pago[]
  resultado_examen        resultado_examen[]

  @@index([id_categoria_edad])
}

model categoria_edad {
  id_categoria_edad Int          @id @default(autoincrement())
  rango             String       @db.VarChar(50)
  b_activo          Boolean      @default(true)
  estudiante        estudiante[]
}

model examen {
  id_examen        Int                @id @default(autoincrement())
  id_nivel         Int?
  nombre           String             @db.VarChar(100)
  b_activo         Boolean?           @default(true)
  nivel            nivel?             @relation(fields: [id_nivel], references: [id_nivel])
  pregunta         pregunta[]
  resultado_examen resultado_examen[]

  @@index([id_nivel])
}

model historial_academico {
  id_historial    Int                   @id @default(autoincrement())
  id_estudiante   Int
  id_imparte      Int
  id_capturo      Int
  tipo_capturo    TipoCapturo?
  calificacion    Float?
  fecha           DateTime?             @db.Date
  tipo            TipoEvaluacion?
  comentario      String?
  asistencia      Float?
  tipo_evaluacion TipoEvaluacionExamen?
  estudiante      estudiante            @relation(fields: [id_estudiante], references: [id_estudiante])
  imparte         imparte               @relation(fields: [id_imparte], references: [id_imparte])

  @@index([id_estudiante])
  @@index([id_capturo])
  @@index([id_imparte])
}

model horario {
  id_horario      Int               @id @default(autoincrement())
  id_estudiante   Int
  id_curso        Int
  comentario      String?
  curso           curso             @relation(fields: [id_curso], references: [id_curso], onDelete: Cascade)
  estudiante      estudiante        @relation(fields: [id_estudiante], references: [id_estudiante], onDelete: Cascade)
  horario_detalle horario_detalle[]

  @@index([id_estudiante])
  @@index([id_curso])
}

model horario_detalle {
  id_imparte Int
  id_horario Int
  comentario String?
  horario    horario @relation(fields: [id_horario], references: [id_horario])
  imparte    imparte @relation(fields: [id_imparte], references: [id_imparte])

  @@id([id_imparte, id_horario])
  @@index([id_horario])
}

model horario_pred {
  id_horario_pred      Int                    @id @default(autoincrement())
  id_curso             Int
  comentario           String?
  curso                curso                  @relation(fields: [id_curso], references: [id_curso], onDelete: Cascade)
  horario_pred_detalle horario_pred_detalle[]

  @@index([id_curso])
}

model horario_pred_detalle {
  id_detalle      Int          @id @default(autoincrement())
  id_imparte      Int
  id_horario_pred Int
  horario_pred    horario_pred @relation(fields: [id_horario_pred], references: [id_horario_pred])
  imparte         imparte      @relation(fields: [id_imparte], references: [id_imparte])

  @@index([id_horario_pred])
  @@index([id_imparte])
}

model imparte {
  id_imparte                Int                         @id @default(autoincrement())
  id_profesor               Int
  id_nivel                  Int
  id_curso                  Int
  dias                      String?                     @db.VarChar(12)
  hora_inicio               Int?
  duracion_min              Int?
  tipo                      TipoImparte?
  historial_academico       historial_academico[]
  horario_detalle           horario_detalle[]
  horario_pred_detalle      horario_pred_detalle[]
  curso                     curso                       @relation(fields: [id_curso], references: [id_curso], onDelete: Cascade)
  nivel                     nivel                       @relation(fields: [id_nivel], references: [id_nivel], onDelete: Cascade)
  profesor                  profesor                    @relation(fields: [id_profesor], references: [id_profesor], onDelete: Cascade)
  imparte_calendario_remota imparte_calendario_remota[]
  pago                      pago[]

  @@index([id_profesor])
  @@index([id_nivel])
  @@index([id_curso])
}

model imparte_calendario_remota {
  id_calendario_remota    Int                       @id @default(autoincrement())
  id_imparte              Int
  hora_inicio             String?
  duracion_minutos        Int?
  url                     String?                   @db.VarChar(60)
  fecha                   DateTime?                 @db.Date
  tema                    String?                   @db.VarChar(30)
  recurrencia             Recurrencia?
  imparte                 imparte                   @relation(fields: [id_imparte], references: [id_imparte])
  imparte_registro_remota imparte_registro_remota[]

  @@index([id_imparte])
}

model imparte_registro_remota {
  id_registro               Int                       @id @default(autoincrement())
  id_estudiante             Int
  id_calendario_remota      Int
  fecha_ingreso             DateTime?
  imparte_calendario_remota imparte_calendario_remota @relation(fields: [id_calendario_remota], references: [id_calendario_remota])
  estudiante                estudiante                @relation(fields: [id_estudiante], references: [id_estudiante])

  @@index([id_calendario_remota])
  @@index([id_estudiante])
}

model nivel {
  id_nivel        Int              @id @default(autoincrement())
  nombre          String           @unique
  b_activo        Boolean?         @default(true)
  class_schedules class_schedule[]
  examen          examen[]
  imparte         imparte[]
}

model pago {
  id_pago       Int         @id @default(autoincrement())
  id_estudiante Int?
  id_imparte    Int
  monto         Decimal     @db.Decimal(10, 2)
  fecha_pago    DateTime    @db.Date
  tipo          PagoTipo
  estudiante    estudiante? @relation(fields: [id_estudiante], references: [id_estudiante])
  imparte       imparte     @relation(fields: [id_imparte], references: [id_imparte])

  @@index([id_estudiante])
  @@index([id_imparte])
}

model pregunta {
  id_pregunta     Int         @id @default(autoincrement())
  id_examen       Int?
  descripcion     String
  ruta_file_media String?     @db.VarChar(100)
  examen          examen?     @relation(fields: [id_examen], references: [id_examen])
  respuesta       respuesta[]

  @@index([id_examen])
}

model profesor {
  id_profesor     Int              @id @default(autoincrement())
  nombre          String           @db.VarChar(30)
  paterno         String?          @db.VarChar(30)
  materno         String?          @db.VarChar(30)
  curp            String?          @db.VarChar(20)
  rfc             String?          @db.VarChar(14)
  direccion       String?          @db.VarChar(30)
  nivel_estudios  String?          @db.VarChar(30)
  observaciones   String?          @db.VarChar(50)
  b_activo        Boolean?         @default(true)
  id_usuario      Int              @unique
  edad            Int?
  telefono        String?          @db.VarChar(25)
  attendance      attendance[]
  class_schedules class_schedule[]
  created_courses curso[]          @relation("CourseCreator")
  imparte         imparte[]
  usuario         usuario          @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
}

model respuesta {
  id_respuesta    Int       @id @default(autoincrement())
  id_pregunta     Int?
  descripcion     String
  ruta_file_media String?   @db.VarChar(100)
  es_correcta     Boolean
  pregunta        pregunta? @relation(fields: [id_pregunta], references: [id_pregunta])

  @@index([id_pregunta])
}

model resultado_examen {
  id_resultado  Int         @id @default(autoincrement())
  id_estudiante Int?
  id_examen     Int?
  calificacion  Decimal     @db.Decimal(5, 2)
  fecha         DateTime    @db.Date
  estudiante    estudiante? @relation(fields: [id_estudiante], references: [id_estudiante])
  examen        examen?     @relation(fields: [id_examen], references: [id_examen])

  @@index([id_estudiante])
  @@index([id_examen])
}

model Administrador {
  id_administrador Int     @id @default(autoincrement())
  id_usuario       Int     @unique
  nombre           String? @db.VarChar(25)
  image            String  @db.VarChar(50)
  email_unico      String? @db.VarChar(200)
  b_activo         Boolean @default(true)
  usuario          usuario @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
}

model usuario {
  email               String              @unique
  password            String
  nombre              String
  apellido            String
  rol                 Rol
  id                  Int                 @id @default(autoincrement())
  administrador       Administrador?
  estudiante          estudiante?
  profesor            profesor?
  verificado          Boolean             @default(false)

  tokenVerif          String?  
  expiraEn            DateTime? 

  // Relaciones del sistema de chat
  chats_creados       chat_room[]         @relation("ChatCreador")
  participaciones     chat_participant[]
  mensajes            chat_message[]
  lecturas_mensajes   chat_message_read[]
}

model curso {
  id_curso        Int              @id @default(autoincrement())
  nombre          String           @db.VarChar(100)
  modalidad       Modalidad
  inicio          DateTime?        @db.Date
  fin             DateTime?        @db.Date
  b_activo        Boolean?         @default(true)
  course_content  String?
  created_at      DateTime?        @default(now())
  created_by      Int?
  descripcion     String?
  features        String?
  requirements    String?
  resumen         String?
  target_audience String?
  updated_at      DateTime?        @default(now()) @updatedAt
  what_you_learn  String?
  precio          Decimal?         @db.Decimal(10, 2) // Precio del curso
  nivel_ingles    String?          @db.VarChar(20)    
  
  duracion_horas  Int?             

  certificado     Boolean?         @default(true)  // Incluye certificado
  inscripciones   Inscripcion[]
  reviews         Review[]
  class_schedules class_schedule[]
  creator         profesor?        @relation("CourseCreator", fields: [created_by], references: [id_profesor])
  horario         horario[]
  horario_pred    horario_pred[]
  imparte         imparte[]

  @@index([created_by])
}

model Inscripcion {
  id             Int              @id @default(autoincrement())
  student_id     Int
  course_id      Int
  enrolled_at    DateTime         @default(now())
  status         EnrollmentStatus @default(ACTIVE)
  payment_status PaymentStatus    @default(PENDING)
  notes          String?
  course         curso            @relation(fields: [course_id], references: [id_curso], onDelete: Cascade)
  student        estudiante       @relation(fields: [student_id], references: [id_estudiante], onDelete: Cascade)
  attendance     attendance[]
  payments       payment[]

  @@unique([student_id, course_id])
  @@index([student_id])
  @@index([course_id])
  @@index([status])
}

model payment {
  id             Int           @id @default(autoincrement())
  enrollment_id  Int
  amount         Decimal       @db.Decimal(10, 2)
  payment_date   DateTime      @default(now())
  payment_method PaymentMethod
  status         PaymentStatus @default(PENDING)
  reference      String?
  notes          String?
  enrollment     Inscripcion   @relation(fields: [enrollment_id], references: [id])

  @@index([enrollment_id])
  @@index([status])
}

model attendance {
  id             Int              @id @default(autoincrement())
  class_date     DateTime
  status         AttendanceStatus
  notes          String?
  recorded_by    Int
  recorded_at    DateTime         @default(now())
  inscripcion_id Int
  Inscripcion    Inscripcion      @relation(fields: [inscripcion_id], references: [id])
  teacher        profesor         @relation(fields: [recorded_by], references: [id_profesor])

  @@unique([inscripcion_id, class_date])
  @@index([inscripcion_id])
  @@index([class_date])
}

model class_schedule {
  id               Int       @id @default(autoincrement())
  course_id        Int
  teacher_id       Int
  level_id         Int
  day_of_week      DayOfWeek
  start_time       String
  duration_minutes Int
  classroom        String?
  is_active        Boolean   @default(true)
  course           curso     @relation(fields: [course_id], references: [id_curso], onDelete: Cascade)
  level            nivel     @relation(fields: [level_id], references: [id_nivel], onDelete: Cascade)
  teacher          profesor  @relation(fields: [teacher_id], references: [id_profesor], onDelete: Cascade)

  @@index([course_id])
  @@index([teacher_id])
  @@index([day_of_week])
}

model Review {
  id         Int        @id @default(autoincrement())
  course_id  Int
  student_id Int
  rating     Int
  comment    String
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt
  is_active  Boolean    @default(true)
  course     curso      @relation(fields: [course_id], references: [id_curso], onDelete: Cascade)
  student    estudiante @relation(fields: [student_id], references: [id_estudiante], onDelete: Cascade)

  @@unique([course_id, student_id])
  @@index([course_id])
  @@index([student_id])
  @@index([rating])
  @@index([created_at])
  @@index([is_active])
}

enum TipoCapturo {
  PROFESOR
  USER
}

enum TipoEvaluacion {
  PARCIAL
  FINAL
}

enum TipoEvaluacionExamen {
  ORD
  RE
  EX
  EX2
}

enum TipoImparte {
  PRESENCIAL
  ONLINE
}

enum Recurrencia {
  UNICO
  PERIODICO
}

enum PagoTipo {
  Mensualidad
}

enum Rol {
  ADMIN
  PROFESOR
  ESTUDIANTE
}

enum Modalidad {
  PRESENCIAL
  ONLINE
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
  SUSPENDED
  TRANSFERRED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
  ONLINE
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

// Sistema de Chat
model chat_room {
  id                 Int                @id @default(autoincrement())
  nombre             String             @db.VarChar(100)
  descripcion        String?            @db.VarChar(255)
  tipo               TipoChatRoom       @default(GENERAL)
  creado_por         Int
  creado_en          DateTime           @default(now())
  activo             Boolean            @default(true)
  
  // Relaciones
  creador            usuario            @relation("ChatCreador", fields: [creado_por], references: [id])
  participantes      chat_participant[]
  mensajes           chat_message[]
  
  @@index([creado_por])
}

model chat_participant {
  id                 Int                @id @default(autoincrement())
  chat_room_id       Int
  usuario_id         Int
  unido_en           DateTime           @default(now())
  ultimo_visto       DateTime?
  activo             Boolean            @default(true)
  
  // Relaciones
  chat_room          chat_room          @relation(fields: [chat_room_id], references: [id], onDelete: Cascade)
  usuario            usuario            @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  
  @@unique([chat_room_id, usuario_id])
  @@index([chat_room_id])
  @@index([usuario_id])
}

model chat_message {
  id                 Int                @id @default(autoincrement())
  chat_room_id       Int
  usuario_id         Int
  contenido          String             @db.Text
  tipo               TipoMensaje        @default(TEXTO)
  archivo_url        String?            @db.VarChar(255)
  archivo_nombre     String?            @db.VarChar(100)
  enviado_en         DateTime           @default(now())
  editado_en         DateTime?
  eliminado          Boolean            @default(false)
  entregado_en       DateTime?          // Cuando el mensaje fue entregado
  visto_en           DateTime?          // Cuando el mensaje fue visto por última vez
  
  // Relaciones
  chat_room          chat_room          @relation(fields: [chat_room_id], references: [id], onDelete: Cascade)
  usuario            usuario            @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  lecturas           chat_message_read[]
  
  @@index([chat_room_id])
  @@index([usuario_id])
  @@index([enviado_en])
}

model chat_message_read {
  id                 Int                @id @default(autoincrement())
  mensaje_id         Int
  usuario_id         Int
  leido_en           DateTime           @default(now())
  
  // Relaciones
  mensaje            chat_message       @relation(fields: [mensaje_id], references: [id], onDelete: Cascade)
  usuario            usuario            @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  
  @@unique([mensaje_id, usuario_id])
  @@index([mensaje_id])
  @@index([usuario_id])
}

enum TipoChatRoom {
  GENERAL       // Chat general para todos
  CLASE         // Chat específico de una clase
  PRIVADO       // Chat privado entre usuarios
  SOPORTE       // Chat de soporte con admin
}

enum TipoMensaje {
  TEXTO
  IMAGEN
  ARCHIVO
  SISTEMA       // Mensajes del sistema (usuario se unió, etc.)
}
